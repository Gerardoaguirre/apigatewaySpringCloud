resilience4j:
  circuitbreaker:
    configs:
      defecto:
        sliding-window-size: 6
        failure-rate-threshold: 50
        wait-duration-in-open-state: 20s
        permitted-number-of-calls-in-half-open-state: 4
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
    instances:
      productos: #nombre de la instancia que se encuentra en el itemcontroller
        base-config: defecto
  timelimiter:
    configs:
      defecto:
        timeout-duration: 2s
    instances:
      productos:
        base-config: defecto

spring:
  cloud:
    gateway:
      routes:
      - id: servicio-productos
        uri: lb://servicio-productos #se pone lb para decir que queremos balanceo de carga
        predicates: #Los predicates son reglas que se deben cumplir para las peticiones //si las reglas no se cumplen devuelve al clienten un 404
          - Path=/api/productos/** #a que endpoint vamos a aplicarle las reglas
          #- Header= token, \d+  #el token debe ser numerico
          #- Header=  Content-Type, application/json
          #- Method=GET, POST
         # - Query=color, verde #que en la url envie verde
          #- Cookie=color, azul #cookie que deben enviar //checar siempre el cliente, ya que por mis otros filtros que cambia la cookie, se cambia. debe ser (color=azul; Path=/api/productos;)
        filters:
          - name: CircuitBreaker #para aplicar circuitbreaker desde apigateway. 
            args:
              name: productos
              statusCodes: 500
              fallbackUri: forward:/api/items/ver/9/cantidad/5 #para manjeras a un camino alternativo cuando falle productos
          - StripPrefix=2 #Segemtnos por los que está creado la ruta api(1) productos (2)
          - EjemploCookie= Hola mi mensaje perosnalizado, usuario, GerardoCOpalcua # manera (2) Y si lo queremos hacer de esta manera debemo configurar la clase, en vez de la otra forma
          #--------un forma de meter filtros  fmanera(1)---------------------------------------------------------------------------
        #filters:
         # - StripPrefix=2 #Segemtnos por los que está creado la ruta api(1) productos (2)
          #- name: Ejemplo #nombre de la clase EjemploGatewayFilterFactory //subfijo  GatewayFilterFactory
           # args:
            #  mensaje: Hola mi mensaje personalizado #esto pinta en el log
             # cookieNombre: usuario
              #cookieValor:  GerardoCopalcua #//siempre sin espacios ni caracteres epeciales //esto se pinta en las cookies de respuesta de la petcion
          #--------un forma de meter filtros ---------------------------------------------------------------------------
      - id: servicio-items
        uri: lb://servicio-items #se pone lb para decir que queremos balanceo de carga
        predicates: #Los predicates son reglas que se deben cumplir para las peticiones
          - Path=/api/items/** #a donde vamos a apuntar las peticiones
        filters:
          - StripPrefix=2 #Segemtnos por los que está creado la ruta api(1) productos (2)
          - AddRequestHeader=token-request, 123456 #para modificar el request de lo que le llega en el, y agregar 
          - AddResponseHeader=token-response, 7890123
          - SetResponseHeader=Content-Type, text/plain
          - AddRequestParameter=nombre, Gerardo #para pasar parametros al request y se envian
#Aqui configuramos las rutas de nuestro apigeway, y ya no en el application properties 

#lista de todos los filtros que podemos meter el gateway
#https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/

